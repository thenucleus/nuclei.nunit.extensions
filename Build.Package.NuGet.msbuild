<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0"
         DefaultTargets="Run"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Build configuration -->
        <Configuration Condition=" '$(Configuration)' == '' ">Release</Configuration>
        <Platform Condition=" '$(Platform)' == ''">Any CPU</Platform>
        <PlatformTranslated>$(Platform.Replace(" ",""))</PlatformTranslated>
    
        <!-- Directories -->
        <DirWorkspace>$(MSBuildProjectDirectory)</DirWorkspace>
        <DirPackages>$(DirWorkspace)\packages</DirPackages>
        <DirSrc>$(DirWorkspace)\src</DirSrc>
        <DirTemplates>$(DirWorkspace)\templates</DirTemplates>
        <DirTools>$(DirWorkspace)\tools</DirTools>
        <DirBuild>$(DirWorkspace)\build</DirBuild>
        <DirBuildBin>$(DirBuild)\bin\$(PlatformTranslated)\$(Configuration)</DirBuildBin>
        <DirBuildDeploy>$(DirBuild)\deploy</DirBuildDeploy>
        <DirBuildTemp>$(DirBuild)\temp</DirBuildTemp>
        
        <!-- Issue tracker -->
        <GitHubUserName></GitHubUserName>
        <GitHubToken></GitHubToken>
        
        <!-- Version number -->
        <VersionSemantic>0</VersionSemantic>
        
        <!-- Tools -->
        <MsBuildExtensionsPath>$(DirTools)\msbuild.extensions</MsBuildExtensionsPath>
    </PropertyGroup>
    
    <Import Project="$(MsBuildExtensionsPath)\FindAndReplaceInFile.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\FindAndReplaceInFile.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\FindToolFromPackages.msbuild" 
            Condition="Exists('$(MsBuildExtensionsPath)\FindToolFromPackages.msbuild')" />
    <Import Project="$(MsBuildExtensionsPath)\GetSemanticVersion.msbuild" 
            Condition="Exists('$(MsBuildExtensionsPath)\GetSemanticVersion.msbuild')" />
    <Import Project="$(MsBuildExtensionsPath)\NugetGatherDependencies.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\NugetGatherDependencies.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\NugetPack.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\NugetPack.msbuild')"/>
    <Import Project="$(MsBuildExtensionsPath)\TemplateFile.msbuild"
            Condition="Exists('$(MsBuildExtensionsPath)\TemplateFile.msbuild')"/>
            
    <Import Project="$(DirWorkspace)\version.xml"
            Condition="Exists('$(DirWorkspace)\version.xml')"/>
    
    <Target Name="Run" DependsOnTargets="_DisplayInfo;_BuildNugetPackageNuclei;_BuildNugetPackageNucleiAppDomains;_BuildNugetPackageNucleiBuild;_BuildNugetPackageNucleiCommunication;_BuildNugetPackageNucleiConfiguration;_BuildNugetPackageNucleiDiagnostics;_BuildNugetPackageExceptionHandling;_BuildNugetPackageFusion;_BuildNugetPackageNunitExtensions" />
    
    <!-- Display info -->
    <Target Name="_DisplayInfo">
        <Message Text="Creating NuGet package..." />
        <Message Text="Version: $(VersionMajor).$(VersionMinor).$(VersionBuild).$(VersionRevision)" />
    </Target>
    
    <PropertyGroup>
        <FileGitVersionExe>GitHubFlowVersion.exe</FileGitVersionExe>
    </PropertyGroup>
    <Target Name="_GetSemanticVersion">
        <FindToolFromPackages PackagesDir="$(DirPackages)" FileToLocate="$(FileGitVersionExe)">
            <Output TaskParameter="Path" PropertyName="PathGitVersionExe" />
        </FindToolFromPackages>
        
        <GetSemanticVersion ExePath="$(PathGitVersionExe)" TempDirectory="$(DirBuildTemp)">
            <Output TaskParameter="VersionSemantic" PropertyName="VersionSemantic" />
        </GetSemanticVersion>
    </Target>
    
    <PropertyGroup>
        <FileGitReleaseNotes>GitReleaseNotes.exe</FileGitReleaseNotes>
        <FileReleaseNotes>$(DirBuildTemp)\releasenotes.md</FileReleaseNotes>
    </PropertyGroup>
    <Target Name="_GatherReleaseNotes" Condition=" '$(GitHubUserName)' != '' AND '$(GitHubToken)' != '' ">
        <FindToolFromPackages PackagesDir="$(DirPackages)" FileToLocate="$(FileGitReleaseNotes)">
            <Output TaskParameter="Path" PropertyName="PathGitReleaseNotesExe" />
        </FindToolFromPackages>
        
        <Exec Command="&quot;$(PathGitReleaseNotesExe)&quot; /I GitHub /R $(GitHubUserName)/nuclei /U $(GitHubUserName) /T $(GitHubToken) /F all /O &quot;$(FileReleaseNotes)&quot;"
              WorkingDirectory="$(DirWorkspace)" />
    
        <CreateProperty Condition="Exists('$(FileReleaseNotes)')" Value="$([System.IO.File]::ReadAllText('$(FileReleaseNotes)'))">
            <Output TaskParameter="Value" PropertyName="ReleaseNotes" />
        </CreateProperty>
    </Target>
    
    <PropertyGroup>
        <FileNuGetExe>$(DirSrc)\.nuget\NuGet.exe</FileNuGetExe>
    </PropertyGroup>
    <PropertyGroup>
        <FileTemplateNuSpecNuclei>$(DirTemplates)\nuclei.nuspec.in</FileTemplateNuSpecNuclei>
        <FileNuSpecNuclei>$(DirBuildTemp)\nuclei.nuspec</FileNuSpecNuclei>
    </PropertyGroup>
    <Target Name="_BuildNugetPackageNuclei" DependsOnTargets="_DisplayInfo;_GetSemanticVersion;_GatherReleaseNotes">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildDeploy)" Condition="!Exists('$(DirBuildDeploy)')" />

        <ItemGroup>
            <NonTestPackageConfigsNuclei Include="$(DirSrc)\Nuclei\packages.config" />
        </ItemGroup>
        <NugetGatherDependencies Packages="@(NonTestPackageConfigsNuclei->'%(identity)')">
            <Output TaskParameter="Dependencies" PropertyName="NugetDependenciesNuclei" />
        </NugetGatherDependencies>

        <ItemGroup>
            <NuSpecTokensNuclei Include="Version">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </NuSpecTokensNuclei>
            <NuSpecTokensNuclei Include="DirBin">
                <ReplacementValue>$(DirBuildBin)</ReplacementValue>
            </NuSpecTokensNuclei>
            <NuSpecTokensNuclei Include="DirSrc">
                <ReplacementValue>$(DirSrc)</ReplacementValue>
            </NuSpecTokensNuclei>
            <NuSpecTokensNuclei Include="ReleaseNotes">
                <ReplacementValue>$(ReleaseNotes)</ReplacementValue>
            </NuSpecTokensNuclei>
            <NuSpecTokensNuclei Include="Dependencies">
                <ReplacementValue>$(NugetDependenciesNuclei)</ReplacementValue>
            </NuSpecTokensNuclei>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateNuSpecNuclei)" OutputFileName="$(FileNuSpecNuclei)" Tokens="@(NuSpecTokensNuclei)" />
        
        <NuGetPack NugetPath="$(FileNuGetExe)" File="$(FileNuSpecNuclei)" OutputDirectory="$(DirBuildDeploy)" ShouldBuildSymbols="true" />
    </Target>
    
    <PropertyGroup>
        <FileTemplateNuSpecNucleiBuild>$(DirTemplates)\nuclei.build.nuspec.in</FileTemplateNuSpecNucleiBuild>
        <FileNuSpecNucleiBuild>$(DirBuildTemp)\nuclei.build.nuspec</FileNuSpecNucleiBuild>
    </PropertyGroup>
    <Target Name="_BuildNugetPackageNucleiBuild" DependsOnTargets="_DisplayInfo;_GetSemanticVersion;_GatherReleaseNotes">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildDeploy)" Condition="!Exists('$(DirBuildDeploy)')" />

        <ItemGroup>
            <NonTestPackageConfigsNucleiBuild Include="$(DirSrc)\Nuclei.Build\packages.config" />
        </ItemGroup>
        <NugetGatherDependencies Packages="@(NonTestPackageConfigsNucleiBuild->'%(identity)')">
            <Output TaskParameter="Dependencies" PropertyName="NugetDependenciesNucleiBuild" />
        </NugetGatherDependencies>

        <ItemGroup>
            <NuSpecTokensNucleiBuild Include="Version">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </NuSpecTokensNucleiBuild>
            <NuSpecTokensNucleiBuild Include="DirBin">
                <ReplacementValue>$(DirBuildBin)</ReplacementValue>
            </NuSpecTokensNucleiBuild>
            <NuSpecTokensNucleiBuild Include="DirSrc">
                <ReplacementValue>$(DirSrc)</ReplacementValue>
            </NuSpecTokensNucleiBuild>
            <NuSpecTokensNucleiBuild Include="ReleaseNotes">
                <ReplacementValue>$(ReleaseNotes)</ReplacementValue>
            </NuSpecTokensNucleiBuild>
            <NuSpecTokensNucleiBuild Include="Dependencies">
                <ReplacementValue>$(NugetDependenciesNucleiBuild)</ReplacementValue>
            </NuSpecTokensNucleiBuild>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateNuSpecNucleiBuild)" OutputFileName="$(FileNuSpecNucleiBuild)" Tokens="@(NuSpecTokensNucleiBuild)" />
        
        <NuGetPack NugetPath="$(FileNuGetExe)" File="$(FileNuSpecNucleiBuild)" OutputDirectory="$(DirBuildDeploy)" ShouldBuildSymbols="true" />
    </Target>
    
    <PropertyGroup>
        <FileTemplateNuSpecNucleiCommunication>$(DirTemplates)\nuclei.communication.nuspec.in</FileTemplateNuSpecNucleiCommunication>
        <FileNuSpecNucleiCommunication>$(DirBuildTemp)\nuclei.communication.nuspec</FileNuSpecNucleiCommunication>
    </PropertyGroup>
    <Target Name="_BuildNugetPackageNucleiCommunication" DependsOnTargets="_DisplayInfo;_GetSemanticVersion;_GatherReleaseNotes">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildDeploy)" Condition="!Exists('$(DirBuildDeploy)')" />

        <ItemGroup>
            <NonTestPackageConfigsNucleiCommunication Include="$(DirSrc)\Nuclei.Communication\packages.config" />
        </ItemGroup>
        <NugetGatherDependencies Packages="@(NonTestPackageConfigsNucleiCommunication->'%(identity)')">
            <Output TaskParameter="Dependencies" PropertyName="NugetDependenciesNucleiCommunication" />
        </NugetGatherDependencies>

        <ItemGroup>
            <NuSpecTokensNucleiCommunication Include="Version">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </NuSpecTokensNucleiCommunication>
            <NuSpecTokensNucleiCommunication Include="DirBin">
                <ReplacementValue>$(DirBuildBin)</ReplacementValue>
            </NuSpecTokensNucleiCommunication>
            <NuSpecTokensNucleiCommunication Include="DirSrc">
                <ReplacementValue>$(DirSrc)</ReplacementValue>
            </NuSpecTokensNucleiCommunication>
            <NuSpecTokensNucleiCommunication Include="ReleaseNotes">
                <ReplacementValue>$(ReleaseNotes)</ReplacementValue>
            </NuSpecTokensNucleiCommunication>
            <NuSpecTokensNucleiCommunication Include="Dependencies">
                <ReplacementValue>$(NugetDependenciesNucleiCommunication)</ReplacementValue>
            </NuSpecTokensNucleiCommunication>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateNuSpecNucleiCommunication)" OutputFileName="$(FileNuSpecNucleiCommunication)" Tokens="@(NuSpecTokensNucleiCommunication)" />
        
        <NuGetPack NugetPath="$(FileNuGetExe)" File="$(FileNuSpecNucleiCommunication)" OutputDirectory="$(DirBuildDeploy)" ShouldBuildSymbols="true" />
    </Target>
    
    <PropertyGroup>
        <FileTemplateNuSpecNucleiConfiguration>$(DirTemplates)\nuclei.configuration.nuspec.in</FileTemplateNuSpecNucleiConfiguration>
        <FileNuSpecNucleiConfiguration>$(DirBuildTemp)\nuclei.configuration.nuspec</FileNuSpecNucleiConfiguration>
    </PropertyGroup>
    <Target Name="_BuildNugetPackageNucleiConfiguration" DependsOnTargets="_DisplayInfo;_GetSemanticVersion;_GatherReleaseNotes">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildDeploy)" Condition="!Exists('$(DirBuildDeploy)')" />

        <ItemGroup>
            <NonTestPackageConfigsNucleiConfiguration Include="$(DirSrc)\Nuclei.Configuration\packages.config" />
        </ItemGroup>
        <NugetGatherDependencies Packages="@(NonTestPackageConfigsNucleiConfiguration->'%(identity)')">
            <Output TaskParameter="Dependencies" PropertyName="NugetDependenciesNucleiConfiguration" />
        </NugetGatherDependencies>

        <ItemGroup>
            <NuSpecTokensNucleiConfiguration Include="Version">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </NuSpecTokensNucleiConfiguration>
            <NuSpecTokensNucleiConfiguration Include="DirBin">
                <ReplacementValue>$(DirBuildBin)</ReplacementValue>
            </NuSpecTokensNucleiConfiguration>
            <NuSpecTokensNucleiConfiguration Include="DirSrc">
                <ReplacementValue>$(DirSrc)</ReplacementValue>
            </NuSpecTokensNucleiConfiguration>
            <NuSpecTokensNucleiConfiguration Include="ReleaseNotes">
                <ReplacementValue>$(ReleaseNotes)</ReplacementValue>
            </NuSpecTokensNucleiConfiguration>
            <NuSpecTokensNucleiConfiguration Include="Dependencies">
                <ReplacementValue>$(NugetDependenciesNucleiConfiguration)</ReplacementValue>
            </NuSpecTokensNucleiConfiguration>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateNuSpecNucleiConfiguration)" OutputFileName="$(FileNuSpecNucleiConfiguration)" Tokens="@(NuSpecTokensNucleiConfiguration)" />
        
        <NuGetPack NugetPath="$(FileNuGetExe)" File="$(FileNuSpecNucleiConfiguration)" OutputDirectory="$(DirBuildDeploy)" ShouldBuildSymbols="true" />
    </Target>
    
    <PropertyGroup>
        <FileTemplateNuSpecNucleiDiagnostics>$(DirTemplates)\nuclei.diagnostics.nuspec.in</FileTemplateNuSpecNucleiDiagnostics>
        <FileNuSpecNucleiDiagnostics>$(DirBuildTemp)\nuclei.diagnostics.nuspec</FileNuSpecNucleiDiagnostics>
    </PropertyGroup>
    <Target Name="_BuildNugetPackageNucleiDiagnostics" DependsOnTargets="_DisplayInfo;_GetSemanticVersion;_GatherReleaseNotes">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildDeploy)" Condition="!Exists('$(DirBuildDeploy)')" />

        <ItemGroup>
            <NonTestPackageConfigsNucleiDiagnostics Include="$(DirSrc)\Nuclei.Diagnostics\packages.config" />
        </ItemGroup>
        <NugetGatherDependencies Packages="@(NonTestPackageConfigsNucleiDiagnostics->'%(identity)')">
            <Output TaskParameter="Dependencies" PropertyName="NugetDependenciesNucleiDiagnostics" />
        </NugetGatherDependencies>

        <ItemGroup>
            <NuSpecTokensNucleiDiagnostics Include="Version">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </NuSpecTokensNucleiDiagnostics>
            <NuSpecTokensNucleiDiagnostics Include="DirBin">
                <ReplacementValue>$(DirBuildBin)</ReplacementValue>
            </NuSpecTokensNucleiDiagnostics>
            <NuSpecTokensNucleiDiagnostics Include="DirSrc">
                <ReplacementValue>$(DirSrc)</ReplacementValue>
            </NuSpecTokensNucleiDiagnostics>
            <NuSpecTokensNucleiDiagnostics Include="ReleaseNotes">
                <ReplacementValue>$(ReleaseNotes)</ReplacementValue>
            </NuSpecTokensNucleiDiagnostics>
            <NuSpecTokensNucleiDiagnostics Include="Dependencies">
                <ReplacementValue>$(NugetDependenciesNucleiDiagnostics)</ReplacementValue>
            </NuSpecTokensNucleiDiagnostics>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateNuSpecNucleiDiagnostics)" OutputFileName="$(FileNuSpecNucleiDiagnostics)" Tokens="@(NuSpecTokensNucleiDiagnostics)" />
        
        <NuGetPack NugetPath="$(FileNuGetExe)" File="$(FileNuSpecNucleiDiagnostics)" OutputDirectory="$(DirBuildDeploy)" ShouldBuildSymbols="true" />
    </Target>
    
    <PropertyGroup>
        <FileTemplateNuSpecNucleiNunitExtensions>$(DirTemplates)\nuclei.nunit.extensions.nuspec.in</FileTemplateNuSpecNucleiNunitExtensions>
        <FileNuSpecNucleiNunitExtensions>$(DirBuildTemp)\nuclei.nunit.extensions.nuspec</FileNuSpecNucleiNunitExtensions>
    </PropertyGroup>
    <Target Name="_BuildNugetPackageNunitExtensions" DependsOnTargets="_DisplayInfo;_GetSemanticVersion;_GatherReleaseNotes">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildDeploy)" Condition="!Exists('$(DirBuildDeploy)')" />

        <ItemGroup>
            <NonTestPackageConfigsNucleiNunitExtensions Include="$(DirSrc)\Nuclei.Nunit.Extensions\packages.config" />
        </ItemGroup>
        <NugetGatherDependencies Packages="@(NonTestPackageConfigsNucleiNunitExtensions->'%(identity)')">
            <Output TaskParameter="Dependencies" PropertyName="NugetDependenciesNucleiNunitExtensions" />
        </NugetGatherDependencies>

        <ItemGroup>
            <NuSpecTokensNucleiNunitExtensions Include="Version">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </NuSpecTokensNucleiNunitExtensions>
            <NuSpecTokensNucleiNunitExtensions Include="DirBin">
                <ReplacementValue>$(DirBuildBin)</ReplacementValue>
            </NuSpecTokensNucleiNunitExtensions>
            <NuSpecTokensNucleiNunitExtensions Include="DirSrc">
                <ReplacementValue>$(DirSrc)</ReplacementValue>
            </NuSpecTokensNucleiNunitExtensions>
            <NuSpecTokensNucleiNunitExtensions Include="ReleaseNotes">
                <ReplacementValue>$(ReleaseNotes)</ReplacementValue>
            </NuSpecTokensNucleiNunitExtensions>
            <NuSpecTokensNucleiNunitExtensions Include="Dependencies">
                <ReplacementValue>$(NugetDependenciesNucleiNunitExtensions)</ReplacementValue>
            </NuSpecTokensNucleiNunitExtensions>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateNuSpecNucleiNunitExtensions)" OutputFileName="$(FileNuSpecNucleiNunitExtensions)" Tokens="@(NuSpecTokensNucleiNunitExtensions)" />
        
        <NuGetPack NugetPath="$(FileNuGetExe)" File="$(FileNuSpecNucleiNunitExtensions)" OutputDirectory="$(DirBuildDeploy)" ShouldBuildSymbols="true" />
    </Target>
    
    <PropertyGroup>
        <DirTempSource>$(DirBuildTemp)\src</DirTempSource>
    </PropertyGroup>
    <PropertyGroup>
        <DirTempSourceNucleiAppDomains>$(DirTempSource)\Nuclei.AppDomains</DirTempSourceNucleiAppDomains>
    </PropertyGroup>
    <Target Name="_PatchSourceNucleiAppDomains">
        <ItemGroup>
            <SourceNucleiAppDomains Include="$(DirSrc)\Nuclei.AppDomains\*.cs" />
        </ItemGroup>
        <MakeDir Directories="$(DirTempSourceNucleiAppDomains)" Condition="!Exists('$(DirTempSourceNucleiAppDomains)')" />
        <Copy SourceFiles="@(SourceNucleiAppDomains)" 
              DestinationFiles="@(SourceNucleiAppDomains->'$(DirTempSourceNucleiAppDomains)\%(Filename).cs.pp')" />
              
        <ItemGroup>
            <SourceNucleiAppDomainsTokens Include="using Nuclei.ExceptionHandling">
                <ReplacementValue>using $rootnamespace$.Nuclei.ExceptionHandling</ReplacementValue>
            </SourceNucleiAppDomainsTokens>
            <SourceNucleiAppDomainsTokens Include="using Nuclei.Fusion">
                <ReplacementValue>using $rootnamespace$.Nuclei.Fusion</ReplacementValue>
            </SourceNucleiAppDomainsTokens>
            <SourceNucleiAppDomainsTokens Include="namespace Nuclei.AppDomains">
                <ReplacementValue>namespace $rootnamespace$.Nuclei.AppDomains</ReplacementValue>
            </SourceNucleiAppDomainsTokens>
        </ItemGroup>
        
        <ItemGroup>
            <SourceNucleiAppDomainsPp Include="$(DirTempSourceNucleiAppDomains)\*.cs.pp" />
        </ItemGroup>
        
        <FindAndReplaceInFile Input="%(SourceNucleiAppDomainsPp.FullPath)"
                              Tokens="@(SourceNucleiAppDomainsTokens)" />
    </Target>
    
    <PropertyGroup>
        <FileTemplateNuSpecNucleiAppDomains>$(DirTemplates)\nuclei.appdomains.nuspec.in</FileTemplateNuSpecNucleiAppDomains>
        <FileNuSpecNucleiAppDomains>$(DirBuildTemp)\nuclei.appdomains.nuspec</FileNuSpecNucleiAppDomains>
    </PropertyGroup>
    <Target Name="_BuildNugetPackageNucleiAppDomains" DependsOnTargets="_DisplayInfo;_GetSemanticVersion;_GatherReleaseNotes;_PatchSourceNucleiAppDomains">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildDeploy)" Condition="!Exists('$(DirBuildDeploy)')" />

        <ItemGroup>
            <NonTestPackageConfigsNucleiAppDomains Include="$(DirSrc)\Nuclei.AppDomains\packages.config" />
        </ItemGroup>
        <NugetGatherDependencies Packages="@(NonTestPackageConfigsNucleiAppDomains->'%(identity)')">
            <Output TaskParameter="Dependencies" PropertyName="NugetDependenciesNucleiAppDomains" />
        </NugetGatherDependencies>

        <ItemGroup>
            <NuSpecTokensNucleiAppDomains Include="Version">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </NuSpecTokensNucleiAppDomains>
            <NuSpecTokensNucleiAppDomains Include="DirBin">
                <ReplacementValue>$(DirTempSourceNucleiAppDomains)</ReplacementValue>
            </NuSpecTokensNucleiAppDomains>
            <NuSpecTokensNucleiAppDomains Include="ReleaseNotes">
                <ReplacementValue>$(ReleaseNotes)</ReplacementValue>
            </NuSpecTokensNucleiAppDomains>
            <NuSpecTokensNucleiAppDomains Include="Dependencies">
                <ReplacementValue>$(NugetDependenciesNucleiAppDomains)</ReplacementValue>
            </NuSpecTokensNucleiAppDomains>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateNuSpecNucleiAppDomains)" OutputFileName="$(FileNuSpecNucleiAppDomains)" Tokens="@(NuSpecTokensNucleiAppDomains)" />
        
        <NuGetPack NugetPath="$(FileNuGetExe)" File="$(FileNuSpecNucleiAppDomains)" OutputDirectory="$(DirBuildDeploy)" ShouldBuildSymbols="false" />
    </Target>
    
    <PropertyGroup>
        <DirTempSourceNucleiExceptionHandling>$(DirTempSource)\Nuclei.ExceptionHandling</DirTempSourceNucleiExceptionHandling>
    </PropertyGroup>
    <Target Name="_PatchSourceNucleiExceptionHandling">
        <ItemGroup>
            <SourceNucleiExceptionHandling Include="$(DirSrc)\Nuclei.ExceptionHandling\*.cs" />
        </ItemGroup>
        <MakeDir Directories="$(DirTempSourceNucleiExceptionHandling)" Condition="!Exists('$(DirTempSourceNucleiExceptionHandling)')" />
        <Copy SourceFiles="@(SourceNucleiExceptionHandling)" 
              DestinationFiles="@(SourceNucleiExceptionHandling->'$(DirTempSourceNucleiExceptionHandling)\%(Filename).cs.pp')" />
              
        <ItemGroup>
            <SourceNucleiExceptionHandlingTokens Include="namespace Nuclei.ExceptionHandling">
                <ReplacementValue>namespace $rootnamespace$.Nuclei.ExceptionHandling</ReplacementValue>
            </SourceNucleiExceptionHandlingTokens>
        </ItemGroup>
        
        <ItemGroup>
            <SourceNucleiExceptionHandlingPp Include="$(DirTempSourceNucleiExceptionHandling)\*.cs.pp" />
        </ItemGroup>
        
        <FindAndReplaceInFile Input="%(SourceNucleiExceptionHandlingPp.FullPath)"
                              Tokens="@(SourceNucleiExceptionHandlingTokens)" />
    </Target>    
    
    <PropertyGroup>
        <FileTemplateNuSpecNucleiExceptionHandling>$(DirTemplates)\nuclei.exceptionhandling.nuspec.in</FileTemplateNuSpecNucleiExceptionHandling>
        <FileNuSpecNucleiExceptionHandling>$(DirBuildTemp)\nuclei.exceptionhandling.nuspec</FileNuSpecNucleiExceptionHandling>
    </PropertyGroup>
    <Target Name="_BuildNugetPackageExceptionHandling" DependsOnTargets="_DisplayInfo;_GetSemanticVersion;_GatherReleaseNotes;_PatchSourceNucleiExceptionHandling">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildDeploy)" Condition="!Exists('$(DirBuildDeploy)')" />

        <ItemGroup>
            <NonTestPackageConfigsNucleiExceptionHandling Include="$(DirSrc)\Nuclei.ExceptionHandling\packages.config" />
        </ItemGroup>
        <NugetGatherDependencies Packages="@(NonTestPackageConfigsNucleiExceptionHandling->'%(identity)')">
            <Output TaskParameter="Dependencies" PropertyName="NugetDependenciesNucleiExceptionHandling" />
        </NugetGatherDependencies>

        <ItemGroup>
            <NuSpecTokensNucleiExceptionHandling Include="Version">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </NuSpecTokensNucleiExceptionHandling>
            <NuSpecTokensNucleiExceptionHandling Include="DirBin">
                <ReplacementValue>$(DirTempSourceNucleiExceptionHandling)</ReplacementValue>
            </NuSpecTokensNucleiExceptionHandling>
            <NuSpecTokensNucleiExceptionHandling Include="ReleaseNotes">
                <ReplacementValue>$(ReleaseNotes)</ReplacementValue>
            </NuSpecTokensNucleiExceptionHandling>
            <NuSpecTokensNucleiExceptionHandling Include="Dependencies">
                <ReplacementValue>$(NugetDependenciesNucleiExceptionHandling)</ReplacementValue>
            </NuSpecTokensNucleiExceptionHandling>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateNuSpecNucleiExceptionHandling)" OutputFileName="$(FileNuSpecNucleiExceptionHandling)" Tokens="@(NuSpecTokensNucleiExceptionHandling)" />
        
        <NuGetPack NugetPath="$(FileNuGetExe)" File="$(FileNuSpecNucleiExceptionHandling)" OutputDirectory="$(DirBuildDeploy)" ShouldBuildSymbols="false" />
    </Target>
    
    <PropertyGroup>
        <DirTempSourceNucleiFusion>$(DirTempSource)\Nuclei.Fusion</DirTempSourceNucleiFusion>
    </PropertyGroup>
    <Target Name="_PatchSourceNucleiFusion">
        <ItemGroup>
            <SourceNucleiFusion Include="$(DirSrc)\Nuclei.Fusion\*.cs" />
        </ItemGroup>
        <MakeDir Directories="$(DirTempSourceNucleiFusion)" Condition="!Exists('$(DirTempSourceNucleiFusion)')" />
        <Copy SourceFiles="@(SourceNucleiFusion)" 
              DestinationFiles="@(SourceNucleiFusion->'$(DirTempSourceNucleiFusion)\%(Filename).cs.pp')" />
              
        <ItemGroup>
            <SourceNucleiFusionTokens Include="namespace Nuclei.Fusion">
                <ReplacementValue>namespace $rootnamespace$.Nuclei.Fusion</ReplacementValue>
            </SourceNucleiFusionTokens>
        </ItemGroup>
        
        <ItemGroup>
            <SourceNucleiFusionPp Include="$(DirTempSourceNucleiFusion)\*.cs.pp" />
        </ItemGroup>
        
        <FindAndReplaceInFile Input="%(SourceNucleiFusionPp.FullPath)"
                              Tokens="@(SourceNucleiFusionTokens)" />
    </Target>
    
    <PropertyGroup>
        <FileTemplateNuSpecNucleiFusion>$(DirTemplates)\nuclei.fusion.nuspec.in</FileTemplateNuSpecNucleiFusion>
        <FileNuSpecNucleiFusion>$(DirBuildTemp)\nuclei.fusion.nuspec</FileNuSpecNucleiFusion>
    </PropertyGroup>
    <Target Name="_BuildNugetPackageFusion" DependsOnTargets="_DisplayInfo;_GetSemanticVersion;_GatherReleaseNotes;_PatchSourceNucleiFusion">
        <MakeDir Directories="$(DirBuildTemp)" Condition="!Exists('$(DirBuildTemp)')" />
        <MakeDir Directories="$(DirBuildDeploy)" Condition="!Exists('$(DirBuildDeploy)')" />

        <ItemGroup>
            <NonTestPackageConfigsNucleiFusion Include="$(DirSrc)\Nuclei.Fusion\packages.config" />
        </ItemGroup>
        <NugetGatherDependencies Packages="@(NonTestPackageConfigsNucleiFusion->'%(identity)')">
            <Output TaskParameter="Dependencies" PropertyName="NugetDependenciesNucleiFusion" />
        </NugetGatherDependencies>

        <ItemGroup>
            <NuSpecTokensNucleiFusion Include="Version">
                <ReplacementValue>$(VersionSemantic)</ReplacementValue>
            </NuSpecTokensNucleiFusion>
            <NuSpecTokensNucleiFusion Include="DirBin">
                <ReplacementValue>$(DirTempSourceNucleiFusion)</ReplacementValue>
            </NuSpecTokensNucleiFusion>
            <NuSpecTokensNucleiFusion Include="ReleaseNotes">
                <ReplacementValue>$(ReleaseNotes)</ReplacementValue>
            </NuSpecTokensNucleiFusion>
            <NuSpecTokensNucleiFusion Include="Dependencies">
                <ReplacementValue>$(NugetDependenciesNucleiFusion)</ReplacementValue>
            </NuSpecTokensNucleiFusion>
        </ItemGroup>
        <TemplateFile Template="$(FileTemplateNuSpecNucleiFusion)" OutputFileName="$(FileNuSpecNucleiFusion)" Tokens="@(NuSpecTokensNucleiFusion)" />
        
        <NuGetPack NugetPath="$(FileNuGetExe)" File="$(FileNuSpecNucleiFusion)" OutputDirectory="$(DirBuildDeploy)" ShouldBuildSymbols="false" />
    </Target>
 </Project>